Deval YL (f)
  (lambda (e a)
    Dzip YL (g) L (x y)
      MMEQUx EQUy #f QU
      MMRx Ry #f PPHx PHy QU (g Tx Ty) QU
    Dassoc YL (g) L (x y)
      MEQUx QU MEQUy x MEHHy x HTHy (g x Ty)
    MNRe (assoc e a)
    MNRHe
      MEHe Qquote HTe
      MEHe Qatom NR (f HTe a)
      MEHe Qeq E (f HTe a) (f HTTe a)
      MEHe Qcar H (f HTe a)
      MEHe Qcdr T (f HTe a)
      MEHe Qcons P (f HTe a) (f HTTe a)
      MEHe Qcond
        (YL (g) L (c a) M (f HHc a) (f HTHc a) (g Tc a) Te a)
        (f P (assoc He a) Te a)
    MEHHe Qlabel
      (f PHTTHe Te PPHTHe PHe QU a)
    MEHHe Qlambda
      (f HTTHe (YL (g) L (x y) MEQUx y PHx (g Tx y) (zip HTHe (YL (g) L (m a) MEQUm QUP (f Hm a) (g Tm a) Te a)) a)) Qerror)

(eval '(quote a) '())
(eval ''a '())
(eval '(quote (a b c)) '())

(eval '(atom 'a) '())
(eval '(atom (quote (a b c))) '())
(eval '(atom '()) '())
(eval '(atom (atom 'a)) '())
(eval '(atom (quote (atom 'a))) '())

(eval '(eq 'a 'a) '())
(eval '(eq 'a 'b) '())
(eval '(eq '() '()) '())

(eval '(car '(a b c)) '())
(eval '(cdr '(a b c)) '())

(eval '(cons 'a '(b c)) '())
(eval '(cons 'a (cons 'b (cons 'c '()))) '())
(eval '(car (cons 'a '(b c))) '())
(eval '(cdr (cons 'a '(b c))) '())

(eval '(cond ((eq 'a 'b) 'first) ((atom 'a) 'second)) '())

(eval '((lambda (x) (cons x '(b))) 'a) '())
(eval '((lambda (x y) (cons x (cdr y))) 'z '(a b c)) '())
(eval '((lambda (f) (f '(b c))) '(lambda (x) (cons 'a x))) '())

(eval '((label subst (lambda (x y z)
                       (cond ((atom z)
                              (cond ((eq z y) x) (#true z)))
                             (#true
                              (cons (subst x y (car z))
                                    (subst x y (cdr z)))))
                       ))
        'm 'b '(a b (a b c) d))
      '())

