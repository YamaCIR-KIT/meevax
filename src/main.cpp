// #define THE_ONLY_SUBSET_OF_THE_EMPTY_SET_IS_ITSELF true

#define MEEVAX_USE_GMP

#include <meevax/kernel/syntactic_continuation.hpp>

int main(const int argc, char const* const* const argv) try
{
  using meevax::let;

  auto root = meevax::syntactic_continuation(meevax::layer<4>());

  // TODO pass argc and argv to syntactic-continuation's constructor directly.
  root.configure(argc, argv);

  for (auto const& each : root.paths)
  {
    root.write_to(root.standard_interaction_port(), meevax::header(__func__), "load ", each, "\n");

    root.load(each.as<meevax::path>());
  }

  if (root.in_interactive_mode())
  {
    root.write_to(root.standard_interaction_port(), meevax::header(__func__), "You have control of root syntactic-continuation.\n");

    for (auto index = 0; root.ready(); ++index) try
    {
      root.write_to(root.standard_interaction_port(), "\n<< ");
      root.write_to(root.standard_interaction_port(), "\n; ", root.evaluate(root.read()), "\n");
    }
    catch (let const& something) // runtime exception generated by user code
    {
      std::cerr << something << std::endl; // NOTE: Use std::cerr directly because the meevax may be broken.
      continue;
    }
    catch (meevax::error const& datum)
    {
      std::cerr << datum << std::endl; // NOTE: Use std::cerr directly because the meevax may be broken.

      if (root.in_interactive_mode())
      {
        continue;
      }
      else
      {
        return boost::exit_exception_failure;
      }
    }

    root.write_to(root.standard_interaction_port(), "\n", meevax::header(__func__), "I have control of root syntactic-continuation.\n");
  }

  return boost::exit_success;
}
catch (meevax::error const& datum)
{
  std::cerr << datum << std::endl;
  return boost::exit_exception_failure;
}
catch (std::exception const& error)
{
  std::cout << meevax::bold << meevax::red << "unexpected standard exception: \"" << error.what() << "\"" << meevax::reset << std::endl;
  return boost::exit_exception_failure;
}
catch (...)
{
  std::cout << meevax::bold << meevax::red << "unexpected exception occurred." << meevax::reset << std::endl;
  return boost::exit_exception_failure;
}

